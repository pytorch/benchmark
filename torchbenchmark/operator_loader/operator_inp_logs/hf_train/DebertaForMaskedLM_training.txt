Operator: aten._log_softmax.default
cnt: 1, ((T([2048, 50265], f16), 1, False), {})
Operator: aten._log_softmax_backward_data.default
cnt: 1, ((T([2048, 50265], f16), T([2048, 50265], f16), 1, f16), {})
Operator: aten._softmax.default
cnt: 12, ((T([4, 12, 512, 512], f16), -1, False), {})
Operator: aten._softmax_backward_data.default
cnt: 12, ((T([4, 12, 512, 512], f16), T([4, 12, 512, 512], f16), -1, f16), {})
Operator: aten._to_copy.default
cnt: 25, ((T([4, 512, 768], f16),), {'dtype': f32})
cnt: 25, ((T([4, 512, 768], f32),), {'dtype': f16})
cnt: 1, ((T([4, 512, 1], f32),), {'dtype': f16})
cnt: 1, ((T([4, 1, 512, 512], f32),), {'dtype': torch.uint8})
cnt: 12, ((T([], f32),), {'dtype': f16, 'device': "torch.device('cpu')"})
cnt: 12, ((T([4, 1, 512, 512], u8),), {'dtype': torch.bool})
cnt: 25, ((T([4, 512, 768], f16),), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})
cnt: 25, ((T([4, 512, 768], f32),), {'dtype': f16, 'layout': torch.strided, 'device': 'cuda'})
Operator: aten._unsafe_view.default
cnt: 12, ((T([2048, 2304], f16), [4, 512, 2304]), {})
cnt: 36, ((T([4, 12, 512, 64], f16), [48, 512, 64]), {})
cnt: 12, ((T([4, 12, 64, 512], f16), [48, 64, 512]), {})
cnt: 12, ((T([48, 512, 512], f16), [4, 12, 512, 512]), {})
cnt: 12, ((T([48, 512, 64], f16), [4, 12, 512, 64]), {})
cnt: 12, ((T([4, 512, 12, 192], f16), [4, 512, 2304]), {})
Operator: aten.add.Tensor
cnt: 25, ((T([4, 512, 1], f32), 1e-07), {})
cnt: 25, ((T([4, 512, 768], f16), T([768], f16)), {})
cnt: 24, ((T([4, 12, 512, 64], f16, stride=(1179648, 192, 2304, 1)), T([1, 12, 1, 64], f16)), {})
cnt: 48, ((T([4, 512, 768], f16), T([4, 512, 768], f16)), {})
cnt: 50, ((T([4, 512, 768], f32), T([4, 512, 768], f32)), {})
cnt: 25, ((T([4, 512, 1], f32), T([4, 512, 1], f32)), {})
cnt: 1, ((T([50265, 768], f16), T([50265, 768], f16)), {})
Operator: aten.add_.Tensor
cnt: 1, ((T([4, 512, 768], f16), T([1, 512, 768], f16)), {})
Operator: aten.addmm.default
cnt: 13, ((T([768], f16), T([2048, 768], f16), T([768, 768], f16, stride=(1, 768))), {})
cnt: 12, ((T([3072], f16), T([2048, 768], f16), T([768, 3072], f16, stride=(1, 768))), {})
cnt: 12, ((T([768], f16), T([2048, 3072], f16), T([3072, 768], f16, stride=(1, 3072))), {})
cnt: 1, ((T([50265], f16), T([2048, 768], f16), T([768, 50265], f16, stride=(1, 768))), {})
Operator: aten.bitwise_not.default
cnt: 12, ((T([4, 1, 512, 512], b8),), {})
Operator: aten.bmm.default
cnt: 12, ((T([48, 512, 64], f16), T([48, 64, 512], f16)), {})
cnt: 12, ((T([48, 512, 512], f16), T([48, 512, 64], f16)), {})
cnt: 12, ((T([48, 512, 512], f16, stride=(262144, 1, 512)), T([48, 512, 64], f16)), {})
cnt: 12, ((T([48, 512, 64], f16), T([48, 64, 512], f16, stride=(32768, 1, 64))), {})
cnt: 12, ((T([48, 64, 512], f16, stride=(32768, 1, 64)), T([48, 512, 512], f16)), {})
cnt: 12, ((T([48, 512, 512], f16), T([48, 512, 64], f16, stride=(32768, 1, 512))), {})
Operator: aten.cat.default
cnt: 12, (([T([4, 12, 512, 64], f16), T([4, 12, 512, 64], f16, stride=(393216, 32768, 1, 512)), T([4, 12, 512, 64], f16)], 3), {})
Operator: aten.clone.default
cnt: 2, ((T([4, 512], i64),), {})
Operator: aten.copy_.default
cnt: 2, ((T([4, 512], i64), T([4, 512], i64)), {})
Operator: aten.div.Scalar
cnt: 50, ((T([4, 512, 768], f32, stride=(512, 1, 0)), 768), {})
Operator: aten.div.Tensor
cnt: 100, ((T([4, 512, 768], f32), T([4, 512, 1], f32)), {})
cnt: 12, ((T([4, 12, 512, 64], f16, stride=(393216, 64, 768, 1)), T([], f16)), {})
cnt: 25, ((T([4, 512, 1], f32), T([4, 512, 1], f32)), {})
cnt: 12, ((T([4, 12, 512, 64], f16), T([], f16)), {})
Operator: aten.embedding.default
cnt: 1, ((T([50265, 768], f16), T([4, 512], i64), 0), {})
cnt: 1, ((T([512, 768], f16), T([1, 512], i64)), {})
Operator: aten.embedding_dense_backward.default
cnt: 1, ((T([1, 512, 768], f16), T([1, 512], i64), 512, -1, False), {})
cnt: 1, ((T([4, 512, 768], f16), T([4, 512], i64), 50265, 0, False), {})
Operator: aten.gelu.default
cnt: 12, ((T([4, 512, 3072], f16),), {})
cnt: 1, ((T([4, 512, 768], f16),), {})
Operator: aten.gelu_backward.default
cnt: 1, ((T([4, 512, 768], f16), T([4, 512, 768], f16)), {})
cnt: 12, ((T([4, 512, 3072], f16), T([4, 512, 3072], f16)), {})
Operator: aten.masked_fill.Tensor
cnt: 12, ((T([4, 12, 512, 512], f16), T([4, 1, 512, 512], b8), T([], f32)), {})
Operator: aten.masked_fill_.Scalar
cnt: 12, ((T([4, 12, 512, 512], f16), T([4, 1, 512, 512], b8), 0), {})
Operator: aten.mean.dim
cnt: 50, ((T([4, 512, 768], f32), [-1], True), {})
Operator: aten.mm.default
cnt: 12, ((T([2048, 768], f16), T([768, 2304], f16, stride=(1, 768))), {})
cnt: 1, ((T([2048, 50265], f16), T([50265, 768], f16)), {})
cnt: 1, ((T([50265, 2048], f16, stride=(1, 50265)), T([2048, 768], f16)), {})
cnt: 13, ((T([2048, 768], f16), T([768, 768], f16)), {})
cnt: 13, ((T([768, 2048], f16, stride=(1, 768)), T([2048, 768], f16)), {})
cnt: 12, ((T([2048, 768], f16), T([768, 3072], f16)), {})
cnt: 12, ((T([768, 2048], f16, stride=(1, 768)), T([2048, 3072], f16)), {})
cnt: 12, ((T([2048, 3072], f16), T([3072, 768], f16)), {})
cnt: 12, ((T([3072, 2048], f16, stride=(1, 3072)), T([2048, 768], f16)), {})
cnt: 12, ((T([2304, 2048], f16, stride=(1, 2304)), T([2048, 768], f16)), {})
cnt: 12, ((T([2048, 2304], f16), T([2304, 768], f16)), {})
Operator: aten.mul.Scalar
cnt: 25, ((T([4, 512, 1], f32), 2), {})
cnt: 25, ((T([4, 512, 768], f32), 2.0), {})
Operator: aten.mul.Tensor
cnt: 25, ((T([768], f16), T([4, 512, 768], f16)), {})
cnt: 2, ((T([4, 512, 768], f16), T([4, 512, 1], f16)), {})
cnt: 1, ((T([4, 1, 1, 512], f32), T([4, 1, 512, 1], f32)), {})
cnt: 12, ((T([], f32), 1), {})
cnt: 25, ((T([4, 512, 768], f16), T([768], f16)), {})
cnt: 25, ((T([4, 512, 768], f16), T([4, 512, 768], f16)), {})
cnt: 50, ((T([4, 512, 768], f32), T([4, 512, 768], f32)), {})
Operator: aten.native_layer_norm.default
cnt: 1, ((T([4, 512, 768], f16), [768], T([768], f16), T([768], f16), 1e-07), {})
Operator: aten.native_layer_norm_backward.default
cnt: 1, ((T([4, 512, 768], f16), T([4, 512, 768], f16), [768], T([4, 512, 1], f32), T([4, 512, 1], f32), T([768], f16), T([768], f16), [True, True, True]), {})
Operator: aten.neg.default
cnt: 75, ((T([4, 512, 768], f32),), {})
Operator: aten.nll_loss_backward.default
cnt: 1, ((T([], f16), T([2048, 50265], f16), T([2048], i64), None, 1, -100, T([], f16)), {})
Operator: aten.nll_loss_forward.default
cnt: 1, ((T([2048, 50265], f16), T([2048], i64), None, 1, -100), {})
Operator: aten.pow.Tensor_Scalar
cnt: 25, ((T([4, 512, 768], f32), 2), {})
cnt: 25, ((T([4, 512, 768], f32), 1.0), {})
Operator: aten.slice_backward.default
cnt: 24, ((T([1, 1, 768], f16), [1, 1, 768], 2, 0, 9223372036854775807, 1), {})
Operator: aten.split.Tensor
cnt: 12, ((T([4, 12, 512, 192], f16, stride=(1179648, 192, 2304, 1)), 64, -1), {})
Operator: aten.sqrt.default
cnt: 25, ((T([4, 512, 1], f32),), {})
cnt: 12, ((T([], f32),), {})
Operator: aten.sub.Tensor
cnt: 50, ((T([4, 512, 768], f32), T([4, 512, 1], f32)), {})
Operator: aten.sum.SymInt
cnt: 1, ((T([2048, 50265], f16), [0], True), {})
cnt: 25, ((T([2048, 768], f16), [0], True), {})
cnt: 50, ((T([4, 512, 768], f16), [0, 1], True), {})
cnt: 75, ((T([4, 512, 768], f32), [2], True), {})
cnt: 12, ((T([2048, 3072], f16), [0], True), {})
cnt: 24, ((T([4, 12, 512, 64], f16), [0, 2], True), {})
cnt: 1, ((T([4, 512, 768], f16), [0], True), {})
